<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="dasbhoard1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        w38yODdUhzSY7wAAAABJRU5ErkJggg==
</value>
  </data>
</root>